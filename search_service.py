import os
import requests
import json
import logging
import urllib.parse
from typing import Optional, Dict, Any

class SearchService:
    def __init__(self):
        self.enabled = True  # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º SearXNG + DuckDuckGo
        logging.info("–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –≤–∫–ª—é—á–µ–Ω: SearXNG + DuckDuckGo")
    
    def search(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ SearXNG –∏ DuckDuckGo"""
        if not self.enabled:
            return None
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º SearXNG (–ª—É—á—à–µ –¥–ª—è —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π)
        result = self._search_searxng(query)
        if result:
            return result
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo
        result = self._search_duckduckgo(query)
        if result:
            return result
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        return f"üîç **–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ**\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'. –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∏: SearXNG –∏ DuckDuckGo."
    
    def _search_duckduckgo(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo –∏—Å–ø–æ–ª—å–∑—É—è –≥–æ—Ç–æ–≤—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É"""
        try:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä—É—Å—Å–∫–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            translated_query = self._translate_query_to_english(query)
            logging.info(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {translated_query}")
            
            from duckduckgo_search import DDGS
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä DDGS
            ddgs = DDGS()
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å instant answer
            try:
                answers = ddgs.answers(translated_query)
                if answers:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º instant answer
                    answer = answers[0]
                    result = f"üìã **{answer.get('title', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')}:**\n{answer.get('answer', answer.get('text', ''))}"
                    
                    if answer.get('url'):
                        result += f"\n\nüìö **–ò—Å—Ç–æ—á–Ω–∏–∫:** {answer['url']}"
                        
                    return f"üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ DuckDuckGo:**\n\n{result}"
            except Exception as e:
                logging.debug(f"Instant answers –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {str(e)}")
            
            # –ï—Å–ª–∏ instant answer –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            try:
                results = list(ddgs.text(translated_query, max_results=3))
                
                if results:
                    result_parts = []
                    
                    for i, result in enumerate(results, 1):
                        title = result.get('title', '').strip()
                        body = result.get('body', '').strip()
                        href = result.get('href', '').strip()
                        
                        if title and body:
                            formatted_result = f"**{i}. {title}**\n{body}"
                            if href:
                                formatted_result += f"\nüîó {href}"
                            result_parts.append(formatted_result)
                    
                    if result_parts:
                        formatted_results = "\n\n".join(result_parts)
                        return f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ DuckDuckGo:**\n\n{formatted_results}"
                        
            except Exception as e:
                logging.error(f"–ü–æ–∏—Å–∫ DuckDuckGo –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}")
            
            return None
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ DuckDuckGo: {str(e)}")
            return None
    
    def _search_searxng(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ SearXNG (–º–µ—Ç–∞–ø–æ–∏—Å–∫–æ–≤–∏–∫)"""
        try:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            translated_query = self._translate_query_to_english(query)
            logging.info(f"SearXNG –ø–æ–∏—Å–∫: {translated_query}")
            
            # –°–ø–∏—Å–æ–∫ –Ω–∞–¥–µ–∂–Ω—ã—Ö SearXNG –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
            searxng_instances = [
                "https://searx.be",
                "https://search.bus-hit.me", 
                "https://searx.tiekoetter.com"
            ]
            
            for instance in searxng_instances:
                try:
                    url = f"{instance}/search"
                    params = {
                        "q": translated_query,
                        "format": "json",
                        "categories": "general",
                        "safesearch": 0,
                        "language": "auto"
                    }
                    
                    headers = {
                        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
                    }
                    
                    response = requests.get(url, params=params, headers=headers, timeout=10)
                    
                    if response.status_code == 200:
                        data = response.json()
                        
                        if data.get('results'):
                            return self._format_searxng_response(data)
                    
                except Exception as e:
                    logging.debug(f"SearXNG –∏–Ω—Å—Ç–∞–Ω—Å {instance} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
                    continue
                    
            return None
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ SearXNG: {str(e)}")
            return None
    
    def _format_searxng_response(self, data: dict) -> Optional[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç SearXNG"""
        try:
            results = data.get('results', [])
            if not results:
                return None
            
            result_parts = []
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            for i, result in enumerate(results[:3], 1):
                title = result.get('title', '').strip()
                content = result.get('content', '').strip()
                url = result.get('url', '').strip()
                
                if title:
                    formatted_result = f"**{i}. {title}**"
                    if content:
                        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                        content = content[:200] + "..." if len(content) > 200 else content
                        formatted_result += f"\n{content}"
                    if url:
                        formatted_result += f"\nüîó {url}"
                    
                    result_parts.append(formatted_result)
            
            if result_parts:
                formatted_results = "\n\n".join(result_parts)
                return f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ SearXNG:**\n\n{formatted_results}"
                
            return None
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SearXNG: {str(e)}")
            return None

    

    
    def _format_duckduckgo_response(self, data: dict) -> Optional[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DuckDuckGo API"""
        result_parts = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
        if data.get('Abstract'):
            result_parts.append(f"üìã **–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n{data['Abstract']}")
        elif data.get('AbstractText'):
            result_parts.append(f"üìã **–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n{data['AbstractText']}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        if data.get('Definition'):
            result_parts.append(f"üìñ **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**\n{data['Definition']}")
        
        # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
        if data.get('Answer'):
            result_parts.append(f"üí° **–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç:**\n{data['Answer']}")
        
        # –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
        if data.get('RelatedTopics'):
            topics = []
            for topic in data['RelatedTopics'][:3]:
                if isinstance(topic, dict) and topic.get('Text'):
                    topics.append(f"‚Ä¢ {topic['Text'][:100]}...")
            if topics:
                result_parts.append(f"üîó **–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã:**\n" + "\n".join(topics))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        if data.get('Results'):
            results = []
            for result in data['Results'][:2]:
                if isinstance(result, dict) and result.get('Text'):
                    results.append(f"‚Ä¢ {result['Text']}")
            if results:
                result_parts.append(f"üîé **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n" + "\n".join(results))
        
        if result_parts:
            result = "\n\n".join(result_parts)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
            if data.get('AbstractURL'):
                result += f"\n\nüìö **–ò—Å—Ç–æ—á–Ω–∏–∫:** {data['AbstractURL']}"
            elif data.get('OfficialWebsite'):
                result += f"\n\nüåê **–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç:** {data['OfficialWebsite']}"
            
            return f"üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ DuckDuckGo:**\n\n{result}"
        
        return None


    
    def _translate_query_to_english(self, query: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä—É—Å—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ DuckDuckGo"""
        query_lower = query.lower().strip()
        
        # –°–ª–æ–≤–∞—Ä—å –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        translations = {
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            "—á—Ç–æ —Ç–∞–∫–æ–µ": "what is",
            "–∫—Ç–æ —Ç–∞–∫–æ–π": "who is", 
            "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ": "tell about",
            "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ": "tell about",
            "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ": "information about",
            "–¥–∞–Ω–Ω—ã–µ –æ": "data about",
            "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ": "definition",
            "–∏—Å—Ç–æ—Ä–∏—è": "history",
            "–±–∏–æ–≥—Ä–∞—Ñ–∏—è": "biography",
            
            # –ù–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            "–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏": "latest news",
            "—Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏": "recent news", 
            "—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç": "what happens",
            "–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": "current information",
            "—á—Ç–æ –Ω–æ–≤–æ–≥–æ": "what's new",
            "–Ω–æ–≤–æ—Å—Ç–∏": "news",
            
            # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            "–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è": "latest version",
            "–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è": "new version",
            "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": "update",
            "–≤—ã–ø—É—Å–∫": "release",
            "–ø–æ—Å–ª–µ–¥–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": "latest information",
            "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ": "information about",
            "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ": "tell about",
            "–ø—Ä–æ —á–∞—Ç –∂–ø—Ç": "about ChatGPT",
            "—á–∞—Ç –∂–ø—Ç": "ChatGPT",
            "–∂–ø—Ç": "GPT",
            "–∂–ø—Ç-5": "GPT-5",
            "–∂–ø—Ç5": "GPT-5",
            "–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ": "latest news about",
            "—Ä–µ–ª–∏–∑": "release",
            "–∞–Ω–æ–Ω—Å": "announcement",
            
            # –§–∏–Ω–∞–Ω—Å—ã
            "–∫—É—Ä—Å": "exchange rate",
            "—Ü–µ–Ω–∞": "price",
            "—Å—Ç–æ–∏–º–æ—Å—Ç—å": "cost",
            "–∫–æ—Ç–∏—Ä–æ–≤–∫–∏": "quotes",
            
            # –ü–æ–≥–æ–¥–∞
            "–ø–æ–≥–æ–¥–∞": "weather",
            "–ø—Ä–æ–≥–Ω–æ–∑": "forecast", 
            "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "temperature",
            "–∫–ª–∏–º–∞—Ç": "climate"
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        translated = query_lower
        for ru_phrase, en_phrase in translations.items():
            translated = translated.replace(ru_phrase, en_phrase)
        
        # –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –º—ã –µ–≥–æ –ø–µ—Ä–µ–≤–µ–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        if translated != query_lower:
            return translated
        
        # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        return query